#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
struct node
{
 int data;
 struct node *next;
};
struct node *start = NULL;
struct node *create_cll(struct node *start)
{
struct node *new_node, *ptr;
int num;
printf("\nEnter â€“1 to end");
printf("\nEnter the data : ");
scanf("%d", &num);
while(num!=-1)
{
new_node = (struct node*)malloc(sizeof(struct node));
new_node -> data = num;
if(start == NULL)
{
new_node -> next = new_node;
start = new_node;
}
else
{ 
 ptr = start;
while(ptr -> next != start)
{
ptr = ptr -> next;
ptr -> next = new_node;
new_node -> next = start;
}
printf("\n Enter the data : ");
scanf("%d", &num);
}
}
return start;
}
struct node *InsertAtBeginning (struct node *start,int value)
{
struct node *new_node;
new_node=(struct node *)malloc(sizeof(struct node));
 new_node->data=value;
 new_node->next=start;
 start=new_node;
 return start;
}
struct node *InsertAtEnd (struct node *start,int value)
{
struct node *new_node,*temp;
new_node=(struct node *)malloc(sizeof(struct node));
 new_node->data=value;
 new_node->next=NULL;
 if(start==NULL)
 {
 start = new_node;
 }
 else 
 {
 temp = start;
 while (temp->next!=NULL)
 {
 temp = temp -> next;
 }
 temp->next = new_node;
 }
 return start;
}
struct node *InsertAfter(struct node *start,int num,int value)
{
struct node *new_node,*temp;
new_node=(struct node *)malloc(sizeof(struct node));
new_node->data=value;
new_node->next=NULL;
temp=start;
while (temp->data!=num)
 temp = temp->next;
 new_node->next=temp->next;
 temp->next= new_node;
 return start;
}
struct node *InsertBefore(struct node *start,int num,int val)
{
struct node *new_node, *ptr, *preptr;
new_node = (struct node *)malloc(sizeof(struct node));
new_node -> data = num;
ptr = start;
while(ptr -> data != val)
{
preptr = ptr;
ptr = ptr -> next;
}
preptr -> next = new_node;
new_node -> next = ptr;
return start;
}
struct node *DelBeginning(struct node *start)
{
 struct node *temp;
 if(start=NULL)
 printf("\nUnderflow");
 return 0;
temp=start;
start=temp->next;
free(temp);
return start;
}
struct node *DelEnd(struct node *start)
{
 struct node *temp,*temp1,*temp2;
if(start==NULL)
{
 printf("\nUnderflow");
}
else if(start->next==NULL)
{
 temp=start;
 start=NULL;
 free(temp);
}
else
{
 temp1=temp2=start;
 while(temp1->next!=NULL)
 {
 temp2=temp1;
 temp1=temp1->next;
 }
 temp2->next=NULL;
 free(temp1);
}
return start;
}
struct node *DelAfter(struct node *start,int num)
{
 struct node *temp1,*temp2;
if (start==NULL)
 printf("\nUnderflow");
temp1=temp2=start;
while(temp2->data!=num)
{
 temp2=temp1;
 temp1=temp1->next;
}
temp2->next=temp1->next;
free(temp1);
return start;
}
struct node *Traversal(struct node *start)
{
 struct node *temp;
 if(start==NULL)
 {
 printf("Empty");
 return 0;
 }
 temp=start;
 while(temp!=NULL)
 {
 printf("\n %d \t",temp->data);
 temp=temp->next;
 }
 return start;
}
struct node printReverse(struct node start)
{
 if (start == NULL)
 return 0;
 printReverse(start->next);
 printf("%d ",start->data);
 return start;
}
struct node *Reverse(struct node *start)
{
 struct node *prev,*next,*curr;
 prev=next=NULL;
 curr=start;
 while(curr!=NULL)
 {
 next=curr->next;
 curr->next=prev;
 prev=curr;
 curr=next;
 }
 start=prev;
 return start;
}
int Size(struct node *start)
{
 struct node *temp;
 int count;
 temp = start;
 count = 0;
 while (temp != NULL) 
 {
 count++;
 temp = temp->next;
 }
 return count;
}
struct node *delete_list(struct node *start)
{
struct node *ptr;
ptr = start;
while(ptr -> next != start)
{
DelEnd(start);
}
free(start);
return start;
}
void main()
{
int option,a,b,c,d,r,num1,num2,num3;
while(1)
{
printf("\n\n **MAIN MENU **");
printf("\n1: Create a list");
printf("\n2: Add a node at the beginning");
printf("\n3: Add a node at the end");
printf("\n4: Insert before a specific node");
printf("\n5: Insert after a specific node");
printf("\n6: Delete a node from the beginning");
printf("\n7: Delete a node from the end");
printf("\n8: Delete a node after a given node");
printf("\n9: Forward Traversal");
printf("\n10: Reverse Traversal");
printf("\n11: Reversing the linked-list");
printf("\n12: Size of the linked-list");
printf("\n13: Delete the entire list");
printf("\n14: EXIT");
printf("\nEnter your option : ");
scanf("%d", &option);
switch(option)
{
case 1: start = create_cll(start);
printf("\nLinear linked-list is created");
break;
case 2: printf("\n Enter the data to be inserted: ");
scanf("%d", &a);
break;
start = InsertAtBeginning(start,a);
case 3: printf("\n Enter the data to be inserted: ");
scanf("%d", &b);
start = InsertAtEnd(start,b);
break;
case 4:printf("\n Enter the data to be inserted: ");
scanf("%d", &c);
printf("\nEnter the value after which the data has to be inserted: ");
scanf("%d", &num1);
start = InsertAfter(start,c,num1);
break;
case 5: printf("\n Enter the data to be inserted: ");
scanf("%d", &d);
printf("\nEnter the value before which the data has to be inserted: ");
scanf("%d", &num2);
start = InsertBefore(start,d,num2);
break;
case 6: start = DelBeginning(start);
break;
case 7: start = DelEnd(start);
break;
case 8: printf("\n Enter the data to be deleted: ");
scanf("%d", &d);
printf("\nEnter the value after which the data has to be deleted: ");
scanf("%d", &num3);
start = DelAfter(start,num3);
break;
case 9: start = Traversal(start);
break;
case 10: start = printReverse(start);
break;
case 11: start = Reverse(start);
break;
case 12: r=Size(start);
printf("\nThe number of elements in the linked-list is %d",r);
break;
case 13:start = delete_list(start);
break;
case 14: exit(0);
break;
default: printf("\nIncorrect Choice. Please Try Again");
break;
}
}
}
